# sensitive variables like these should be stored in a separate file from the
# other tf variables and resources, and encrypted with a tool like git-crypt
# TF variables are not stored in the state file
#
# Since the SSM backend is able to create the secrets on the fly, we don't have to
# ensure the parameter resources are created before running aws-secrets-sync. You
# only have to define the secrets variable map.  Unlike the other examples, this
# one uses the fully qualified secret name.
variable "secrets" {
  type = "map"

  default = {
    "/my-prefix/secret/key1" = "value1"
    "/my-prefix/secret/key2" = "value2"
  }
}

variable "secrets_backend" { default = "ssm" }
variable "region" { default = "us-east-1" }

variable "kms_key" {
  description = "The KMS key used to encrypt the secrets, if not specified, use the service default key"
  default = "alias/ssm"
}

provider "aws" {
  region = "${var.region}"
}

# This is what sets the secret value in the AWS resource
resource "null_resource" "sync" {
  triggers = {
    secrets = "${base64sha512(var.secrets)}"
  }

  provisioner "local-exec" {
    environment {
      SECRET_BACKEND = "${var.secrets_backend}"
      KMS_KEY = "${var.kms_key}"
    }

    command = "/path/to/aws-secrets-sync ${base64gzip(jsonencode(var.secrets))}"
  }
}